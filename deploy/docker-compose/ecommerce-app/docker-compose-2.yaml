version: '3'
services:
  agent:
    image: "datadog/agent:7.35.2"
    container_name: agent
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_HOSTNAME=${HOSTNAME}
      - DD_LOG_LEVEL=WARN
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=false
      - DD_LOGS_CONFIG_DOCKER_CONTAINER_USE_FILE=true
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_DOCKER_LABELS_AS_TAGS={"my.custom.label.team":"team"}
      - DD_TAGS='agent_type:docker provider:econocom'
    ports:
      - "8126:8126"
      - "8125:8125"
    volumes:
      - /etc/passwd:/etc/passwd:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /proc/:/host/proc/:ro
      - /opt/datadog-agent/run:/opt/datadog-agent/run:rw
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
    labels:
      com.datadoghq.ad.logs: '[{"source": "agent", "service": "agent"}]'
  db:
    image: postgres:13-alpine
    container_name: db
    restart: always
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    labels:
      my.custom.label.team: "database"
      com.datadoghq.ad.logs: '[{"source": "postgresql", "service": "postgres"}]'
  discounts:
    image: "econocombrasil/discounts-service:v1.0"
    container_name: discounts
    environment:
      - FLASK_APP=discounts.py
      - FLASK_DEBUG=1
      - POSTGRES_DATABASE=${DB_USERNAME}
      - POSTGRES_SCHEMA=public
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_HOST=db
      - DD_AGENT_HOST=agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_ENV=training
      - DD_SERVICE=discounts
      - DD_VERSION=v1.0
      - DD_SERVICE_MAPPING="postgres:discounts-postgres"
    command: ddtrace-run flask run --port=5001 --host=0.0.0.0
    ports:
      - "5001:5001"
    depends_on:
      - agent
      - db
    labels:
      com.datadoghq.tags.env: "training"
      com.datadoghq.tags.service: "discounts"
      com.datadoghq.tags.version: "v1.0"
      com.datadoghq.ad.logs: '[{"source": "python", "service": "discounts"}]'
      my.custom.label.team: "backend"
  advertisements:
    image: "econocombrasil/advertisements-service:v1.0"
    container_name: advertisements
    command: ddtrace-run flask run --port=5002 --host=0.0.0.0
    environment:
      - FLASK_APP=ads.py
      - FLASK_DEBUG=1
      - POSTGRES_DATABASE=${DB_USERNAME}
      - POSTGRES_SCHEMA=public
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_HOST=db
      - DD_ENV=training
      - DD_SERVICE=advertisements
      - DD_VERSION=v1.0
      - DD_AGENT_HOST=agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_SERVICE_MAPPING="postgres:advertisements-postgres"
    ports:
      - "5002:5002"
    depends_on:
      - agent
      - db
    labels:
      com.datadoghq.tags.env: "training"
      com.datadoghq.tags.service: "advertisements"
      com.datadoghq.tags.version: "v1.0"
      com.datadoghq.ad.logs: '[{"source": "python", "service": "advertisements"}]'
      my.custom.label.team: "backend"
  store-frontend:
    image: "econocombrasil/store-frontend:v3.0"
    container_name: store-frontend
    environment:
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - NODE_NAME=${HOSTNAME}
      - DD_ENV=training
      - DD_SERVICE=store-frontend
      - DD_VERSION=v3.0
      - DD_AGENT_HOST=agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_CLIENT_TOKEN=${DD_CLIENT_TOKEN}
      - DD_APPLICATION_ID=${DD_APPLICATION_ID}
    command: sh docker-entrypoint.sh
    ports:
      - "80:3000"
    depends_on:
      - agent
      - db
      - discounts
      - advertisements
    labels:
      com.datadoghq.tags.env: "training"
      com.datadoghq.tags.service: "store-frontend"
      com.datadoghq.tags.version: "v3.0"
      com.datadoghq.ad.logs: '[{"source": "ruby", "service": "store-frontend"}]'
      my.custom.label.team: "frontend"
